
AdvancedLineFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001030  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  0080010a  0080010a  000010ce  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ca  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008de  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000299  00000000  00000000  000046a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000557  00000000  00000000  0000493f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00004e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025e  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e4  00000000  00000000  00005342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_1>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	aa e0       	ldi	r26, 0x0A	; 10
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a4 34       	cpi	r26, 0x44	; 68
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 85 02 	call	0x50a	; 0x50a <main>
      c8:	0c 94 16 08 	jmp	0x102c	; 0x102c <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <pwm_Init>:
#define motorSensorDist 9
volatile float sensor[7],currentSensorReading=0,distance=0;
volatile float prevSensorReading=0,newErrorFromEqn=0,prevErrorFromEqn=0,m=0,c=0;
volatile int outOfLine=0;
void pwm_Init(){
	DDRB = 0xFF;
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	87 bb       	out	0x17, r24	; 23
	TCCR1A |= (1<<COM1A1) | (1<<WGM11) ;
      d4:	8f b5       	in	r24, 0x2f	; 47
      d6:	82 68       	ori	r24, 0x82	; 130
      d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11) | (1<< WGM13) | (1<<WGM12);	//non inverting mode,prescaler 8
      da:	8e b5       	in	r24, 0x2e	; 46
      dc:	8a 61       	ori	r24, 0x1A	; 26
      de:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
      e0:	8f e1       	ldi	r24, 0x1F	; 31
      e2:	9e e4       	ldi	r25, 0x4E	; 78
      e4:	97 bd       	out	0x27, r25	; 39
      e6:	86 bd       	out	0x26, r24	; 38
}
      e8:	08 95       	ret

000000ea <pwm_Init_Motor>:
void pwm_Init_Motor(){
	
	TCCR0 |= (1<<CS01) |(1<<COM01)|(1<< WGM01) | (1<<WGM00);	//non inverting mode,prescaler 8
      ea:	83 b7       	in	r24, 0x33	; 51
      ec:	8a 66       	ori	r24, 0x6A	; 106
      ee:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= (1<<CS21) |(1<<COM21)|(1<< WGM21) | (1<<WGM20);	//non inverting mode,prescaler 8
      f0:	85 b5       	in	r24, 0x25	; 37
      f2:	8a 66       	ori	r24, 0x6A	; 106
      f4:	85 bd       	out	0x25, r24	; 37

}
      f6:	08 95       	ret

000000f8 <motor_speed_percent>:
void motor_speed_percent(int percent1,int percent2){
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	eb 01       	movw	r28, r22
	OCR0=(int)(percent1*2.55);
      fe:	9c 01       	movw	r18, r24
     100:	b9 01       	movw	r22, r18
     102:	88 27       	eor	r24, r24
     104:	77 fd       	sbrc	r23, 7
     106:	80 95       	com	r24
     108:	98 2f       	mov	r25, r24
     10a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatsisf>
     10e:	23 e3       	ldi	r18, 0x33	; 51
     110:	33 e3       	ldi	r19, 0x33	; 51
     112:	43 e2       	ldi	r20, 0x23	; 35
     114:	50 e4       	ldi	r21, 0x40	; 64
     116:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     11a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     11e:	61 bf       	out	0x31, r22	; 49
	OCR2=(int)(percent2*2.55);
     120:	be 01       	movw	r22, r28
     122:	88 27       	eor	r24, r24
     124:	77 fd       	sbrc	r23, 7
     126:	80 95       	com	r24
     128:	98 2f       	mov	r25, r24
     12a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatsisf>
     12e:	23 e3       	ldi	r18, 0x33	; 51
     130:	33 e3       	ldi	r19, 0x33	; 51
     132:	43 e2       	ldi	r20, 0x23	; 35
     134:	50 e4       	ldi	r21, 0x40	; 64
     136:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     13a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     13e:	63 bd       	out	0x23, r22	; 35
}
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <moveServo_to_angle>:
void moveServo_to_angle(int m)
{
	m+=90;
     146:	bc 01       	movw	r22, r24
     148:	66 5a       	subi	r22, 0xA6	; 166
     14a:	7f 4f       	sbci	r23, 0xFF	; 255
	OCR1A = m * (11.38) + 550.0;
     14c:	88 27       	eor	r24, r24
     14e:	77 fd       	sbrc	r23, 7
     150:	80 95       	com	r24
     152:	98 2f       	mov	r25, r24
     154:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatsisf>
     158:	2b e7       	ldi	r18, 0x7B	; 123
     15a:	34 e1       	ldi	r19, 0x14	; 20
     15c:	46 e3       	ldi	r20, 0x36	; 54
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e8       	ldi	r19, 0x80	; 128
     168:	49 e0       	ldi	r20, 0x09	; 9
     16a:	54 e4       	ldi	r21, 0x44	; 68
     16c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     170:	0e 94 94 06 	call	0xd28	; 0xd28 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9b bd       	out	0x2b, r25	; 43
     17a:	8a bd       	out	0x2a, r24	; 42
}
     17c:	08 95       	ret

0000017e <interrupt_Initialise>:

void interrupt_Initialise(){
	//Initialize Interrupts on PD1
	EICRA|=1<<ISC01;
     17e:	ea e6       	ldi	r30, 0x6A	; 106
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	82 60       	ori	r24, 0x02	; 2
     186:	80 83       	st	Z, r24
	EIMSK|=1<<INT0;
     188:	89 b7       	in	r24, 0x39	; 57
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	89 bf       	out	0x39, r24	; 57
}
     18e:	08 95       	ret

00000190 <read_Sensor>:
void read_Sensor(){
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
	//Line Sensor On Port E
	int i;
	for(i=0;i<7;i++){
     1a8:	c0 e0       	ldi	r28, 0x00	; 0
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
		if(bit_is_clear(lineSensorPort,i)){
			sensor[i]=1;
		}
		else{
			sensor[i]=0;
     1ac:	08 e2       	ldi	r16, 0x28	; 40
     1ae:	11 e0       	ldi	r17, 0x01	; 1
     1b0:	0f 2e       	mov	r0, r31
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	cf 2e       	mov	r12, r31
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	df 2e       	mov	r13, r31
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	ef 2e       	mov	r14, r31
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ff 2e       	mov	r15, r31
     1c2:	f0 2d       	mov	r31, r0
void read_Sensor(){
	//Line Sensor On Port E
	int i;
	for(i=0;i<7;i++){
		if(bit_is_clear(lineSensorPort,i)){
			sensor[i]=1;
     1c4:	0f 2e       	mov	r0, r31
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	8f 2e       	mov	r8, r31
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	9f 2e       	mov	r9, r31
     1ce:	f0 e8       	ldi	r31, 0x80	; 128
     1d0:	af 2e       	mov	r10, r31
     1d2:	ff e3       	ldi	r31, 0x3F	; 63
     1d4:	bf 2e       	mov	r11, r31
     1d6:	f0 2d       	mov	r31, r0
}
void read_Sensor(){
	//Line Sensor On Port E
	int i;
	for(i=0;i<7;i++){
		if(bit_is_clear(lineSensorPort,i)){
     1d8:	81 b1       	in	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0c 2e       	mov	r0, r28
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <read_Sensor+0x54>
     1e0:	95 95       	asr	r25
     1e2:	87 95       	ror	r24
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <read_Sensor+0x50>
     1e8:	80 fd       	sbrc	r24, 0
     1ea:	0c c0       	rjmp	.+24     	; 0x204 <read_Sensor+0x74>
			sensor[i]=1;
     1ec:	fe 01       	movw	r30, r28
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	e0 0f       	add	r30, r16
     1f8:	f1 1f       	adc	r31, r17
     1fa:	80 82       	st	Z, r8
     1fc:	91 82       	std	Z+1, r9	; 0x01
     1fe:	a2 82       	std	Z+2, r10	; 0x02
     200:	b3 82       	std	Z+3, r11	; 0x03
     202:	0b c0       	rjmp	.+22     	; 0x21a <read_Sensor+0x8a>
		}
		else{
			sensor[i]=0;
     204:	fe 01       	movw	r30, r28
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	e0 0f       	add	r30, r16
     210:	f1 1f       	adc	r31, r17
     212:	c0 82       	st	Z, r12
     214:	d1 82       	std	Z+1, r13	; 0x01
     216:	e2 82       	std	Z+2, r14	; 0x02
     218:	f3 82       	std	Z+3, r15	; 0x03
		}
		USART_TransmitNumber(sensor[i],1);
     21a:	fe 01       	movw	r30, r28
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	e0 0f       	add	r30, r16
     226:	f1 1f       	adc	r31, r17
     228:	60 81       	ld	r22, Z
     22a:	71 81       	ldd	r23, Z+1	; 0x01
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
     230:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	0e 94 80 05 	call	0xb00	; 0xb00 <USART_TransmitNumber>
	EIMSK|=1<<INT0;
}
void read_Sensor(){
	//Line Sensor On Port E
	int i;
	for(i=0;i<7;i++){
     23a:	21 96       	adiw	r28, 0x01	; 1
     23c:	c7 30       	cpi	r28, 0x07	; 7
     23e:	d1 05       	cpc	r29, r1
     240:	59 f6       	brne	.-106    	; 0x1d8 <read_Sensor+0x48>
		else{
			sensor[i]=0;
		}
		USART_TransmitNumber(sensor[i],1);
	}
	USART_Transmitchar(0x0d,1);
     242:	8d e0       	ldi	r24, 0x0D	; 13
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	08 95       	ret

00000264 <calculate_Errror>:
void calculate_Errror(){
     264:	4f 92       	push	r4
     266:	5f 92       	push	r5
     268:	6f 92       	push	r6
     26a:	7f 92       	push	r7
     26c:	8f 92       	push	r8
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	2c 97       	sbiw	r28, 0x0c	; 12
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
	int onsensors=sensor[0]+sensor[1]+sensor[2]+sensor[3]+sensor[4]+sensor[5]+sensor[6];
     294:	60 91 28 01 	lds	r22, 0x0128
     298:	70 91 29 01 	lds	r23, 0x0129
     29c:	80 91 2a 01 	lds	r24, 0x012A
     2a0:	90 91 2b 01 	lds	r25, 0x012B
     2a4:	20 91 2c 01 	lds	r18, 0x012C
     2a8:	30 91 2d 01 	lds	r19, 0x012D
     2ac:	40 91 2e 01 	lds	r20, 0x012E
     2b0:	50 91 2f 01 	lds	r21, 0x012F
     2b4:	e0 90 30 01 	lds	r14, 0x0130
     2b8:	f0 90 31 01 	lds	r15, 0x0131
     2bc:	00 91 32 01 	lds	r16, 0x0132
     2c0:	10 91 33 01 	lds	r17, 0x0133
     2c4:	e9 86       	std	Y+9, r14	; 0x09
     2c6:	fa 86       	std	Y+10, r15	; 0x0a
     2c8:	0b 87       	std	Y+11, r16	; 0x0b
     2ca:	1c 87       	std	Y+12, r17	; 0x0c
     2cc:	80 90 34 01 	lds	r8, 0x0134
     2d0:	90 90 35 01 	lds	r9, 0x0135
     2d4:	a0 90 36 01 	lds	r10, 0x0136
     2d8:	b0 90 37 01 	lds	r11, 0x0137
     2dc:	40 90 38 01 	lds	r4, 0x0138
     2e0:	50 90 39 01 	lds	r5, 0x0139
     2e4:	60 90 3a 01 	lds	r6, 0x013A
     2e8:	70 90 3b 01 	lds	r7, 0x013B
     2ec:	e0 90 3c 01 	lds	r14, 0x013C
     2f0:	f0 90 3d 01 	lds	r15, 0x013D
     2f4:	00 91 3e 01 	lds	r16, 0x013E
     2f8:	10 91 3f 01 	lds	r17, 0x013F
     2fc:	e9 82       	std	Y+1, r14	; 0x01
     2fe:	fa 82       	std	Y+2, r15	; 0x02
     300:	0b 83       	std	Y+3, r16	; 0x03
     302:	1c 83       	std	Y+4, r17	; 0x04
     304:	e0 90 40 01 	lds	r14, 0x0140
     308:	f0 90 41 01 	lds	r15, 0x0141
     30c:	00 91 42 01 	lds	r16, 0x0142
     310:	10 91 43 01 	lds	r17, 0x0143
     314:	ed 82       	std	Y+5, r14	; 0x05
     316:	fe 82       	std	Y+6, r15	; 0x06
     318:	0f 83       	std	Y+7, r16	; 0x07
     31a:	18 87       	std	Y+8, r17	; 0x08
     31c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     320:	29 85       	ldd	r18, Y+9	; 0x09
     322:	3a 85       	ldd	r19, Y+10	; 0x0a
     324:	4b 85       	ldd	r20, Y+11	; 0x0b
     326:	5c 85       	ldd	r21, Y+12	; 0x0c
     328:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     32c:	a5 01       	movw	r20, r10
     32e:	94 01       	movw	r18, r8
     330:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     334:	a3 01       	movw	r20, r6
     336:	92 01       	movw	r18, r4
     338:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     33c:	29 81       	ldd	r18, Y+1	; 0x01
     33e:	3a 81       	ldd	r19, Y+2	; 0x02
     340:	4b 81       	ldd	r20, Y+3	; 0x03
     342:	5c 81       	ldd	r21, Y+4	; 0x04
     344:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     348:	a8 01       	movw	r20, r16
     34a:	97 01       	movw	r18, r14
     34c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     350:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     354:	2b 01       	movw	r4, r22
     356:	3c 01       	movw	r6, r24
	currentSensorReading=0;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	dc 01       	movw	r26, r24
     35e:	80 93 24 01 	sts	0x0124, r24
     362:	90 93 25 01 	sts	0x0125, r25
     366:	a0 93 26 01 	sts	0x0126, r26
     36a:	b0 93 27 01 	sts	0x0127, r27
	for(int i=0;i<7;i++){
     36e:	66 24       	eor	r6, r6
     370:	77 24       	eor	r7, r7
		currentSensorReading+=(float)((i-3)*sensor[i]);
     372:	08 e2       	ldi	r16, 0x28	; 40
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	f3 01       	movw	r30, r6
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e0 0f       	add	r30, r16
     382:	f1 1f       	adc	r31, r17
     384:	c0 80       	ld	r12, Z
     386:	d1 80       	ldd	r13, Z+1	; 0x01
     388:	e2 80       	ldd	r14, Z+2	; 0x02
     38a:	f3 80       	ldd	r15, Z+3	; 0x03
     38c:	80 90 24 01 	lds	r8, 0x0124
     390:	90 90 25 01 	lds	r9, 0x0125
     394:	a0 90 26 01 	lds	r10, 0x0126
     398:	b0 90 27 01 	lds	r11, 0x0127
		}
		USART_TransmitNumber(sensor[i],1);
	}
	USART_Transmitchar(0x0d,1);
}
void calculate_Errror(){
     39c:	b3 01       	movw	r22, r6
     39e:	63 50       	subi	r22, 0x03	; 3
     3a0:	70 40       	sbci	r23, 0x00	; 0
	int onsensors=sensor[0]+sensor[1]+sensor[2]+sensor[3]+sensor[4]+sensor[5]+sensor[6];
	currentSensorReading=0;
	for(int i=0;i<7;i++){
		currentSensorReading+=(float)((i-3)*sensor[i]);
     3a2:	88 27       	eor	r24, r24
     3a4:	77 fd       	sbrc	r23, 7
     3a6:	80 95       	com	r24
     3a8:	98 2f       	mov	r25, r24
     3aa:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatsisf>
     3ae:	a7 01       	movw	r20, r14
     3b0:	96 01       	movw	r18, r12
     3b2:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     3b6:	a5 01       	movw	r20, r10
     3b8:	94 01       	movw	r18, r8
     3ba:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     3be:	46 2f       	mov	r20, r22
     3c0:	57 2f       	mov	r21, r23
     3c2:	68 2f       	mov	r22, r24
     3c4:	79 2f       	mov	r23, r25
     3c6:	40 93 24 01 	sts	0x0124, r20
     3ca:	50 93 25 01 	sts	0x0125, r21
     3ce:	60 93 26 01 	sts	0x0126, r22
     3d2:	70 93 27 01 	sts	0x0127, r23
	USART_Transmitchar(0x0d,1);
}
void calculate_Errror(){
	int onsensors=sensor[0]+sensor[1]+sensor[2]+sensor[3]+sensor[4]+sensor[5]+sensor[6];
	currentSensorReading=0;
	for(int i=0;i<7;i++){
     3d6:	08 94       	sec
     3d8:	61 1c       	adc	r6, r1
     3da:	71 1c       	adc	r7, r1
     3dc:	87 e0       	ldi	r24, 0x07	; 7
     3de:	68 16       	cp	r6, r24
     3e0:	71 04       	cpc	r7, r1
     3e2:	49 f6       	brne	.-110    	; 0x376 <calculate_Errror+0x112>
		currentSensorReading+=(float)((i-3)*sensor[i]);
	}
	currentSensorReading/=(7-onsensors);
     3e4:	c0 90 24 01 	lds	r12, 0x0124
     3e8:	d0 90 25 01 	lds	r13, 0x0125
     3ec:	e0 90 26 01 	lds	r14, 0x0126
     3f0:	f0 90 27 01 	lds	r15, 0x0127
     3f4:	07 e0       	ldi	r16, 0x07	; 7
     3f6:	10 e0       	ldi	r17, 0x00	; 0
     3f8:	04 19       	sub	r16, r4
     3fa:	15 09       	sbc	r17, r5
     3fc:	b8 01       	movw	r22, r16
     3fe:	88 27       	eor	r24, r24
     400:	77 fd       	sbrc	r23, 7
     402:	80 95       	com	r24
     404:	98 2f       	mov	r25, r24
     406:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatsisf>
     40a:	9b 01       	movw	r18, r22
     40c:	ac 01       	movw	r20, r24
     40e:	c7 01       	movw	r24, r14
     410:	b6 01       	movw	r22, r12
     412:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divsf3>
     416:	46 2f       	mov	r20, r22
     418:	57 2f       	mov	r21, r23
     41a:	68 2f       	mov	r22, r24
     41c:	79 2f       	mov	r23, r25
     41e:	40 93 24 01 	sts	0x0124, r20
     422:	50 93 25 01 	sts	0x0125, r21
     426:	60 93 26 01 	sts	0x0126, r22
     42a:	70 93 27 01 	sts	0x0127, r23
	if((7-onsensors>=4) &&currentSensorReading<0)currentSensorReading--;
     42e:	04 30       	cpi	r16, 0x04	; 4
     430:	11 05       	cpc	r17, r1
     432:	0c f4       	brge	.+2      	; 0x436 <calculate_Errror+0x1d2>
     434:	53 c0       	rjmp	.+166    	; 0x4dc <calculate_Errror+0x278>
     436:	60 91 24 01 	lds	r22, 0x0124
     43a:	70 91 25 01 	lds	r23, 0x0125
     43e:	80 91 26 01 	lds	r24, 0x0126
     442:	90 91 27 01 	lds	r25, 0x0127
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	a9 01       	movw	r20, r18
     44c:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     450:	88 23       	and	r24, r24
     452:	dc f4       	brge	.+54     	; 0x48a <calculate_Errror+0x226>
     454:	60 91 24 01 	lds	r22, 0x0124
     458:	70 91 25 01 	lds	r23, 0x0125
     45c:	80 91 26 01 	lds	r24, 0x0126
     460:	90 91 27 01 	lds	r25, 0x0127
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e8       	ldi	r20, 0x80	; 128
     46a:	5f e3       	ldi	r21, 0x3F	; 63
     46c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
     470:	46 2f       	mov	r20, r22
     472:	57 2f       	mov	r21, r23
     474:	68 2f       	mov	r22, r24
     476:	79 2f       	mov	r23, r25
     478:	40 93 24 01 	sts	0x0124, r20
     47c:	50 93 25 01 	sts	0x0125, r21
     480:	60 93 26 01 	sts	0x0126, r22
     484:	70 93 27 01 	sts	0x0127, r23
     488:	29 c0       	rjmp	.+82     	; 0x4dc <calculate_Errror+0x278>
	else if((7-onsensors)>=4 && currentSensorReading>0)currentSensorReading++;
     48a:	60 91 24 01 	lds	r22, 0x0124
     48e:	70 91 25 01 	lds	r23, 0x0125
     492:	80 91 26 01 	lds	r24, 0x0126
     496:	90 91 27 01 	lds	r25, 0x0127
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	a9 01       	movw	r20, r18
     4a0:	0e 94 72 07 	call	0xee4	; 0xee4 <__gesf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	d4 f4       	brge	.+52     	; 0x4dc <calculate_Errror+0x278>
     4a8:	60 91 24 01 	lds	r22, 0x0124
     4ac:	70 91 25 01 	lds	r23, 0x0125
     4b0:	80 91 26 01 	lds	r24, 0x0126
     4b4:	90 91 27 01 	lds	r25, 0x0127
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     4c4:	46 2f       	mov	r20, r22
     4c6:	57 2f       	mov	r21, r23
     4c8:	68 2f       	mov	r22, r24
     4ca:	79 2f       	mov	r23, r25
     4cc:	40 93 24 01 	sts	0x0124, r20
     4d0:	50 93 25 01 	sts	0x0125, r21
     4d4:	60 93 26 01 	sts	0x0126, r22
     4d8:	70 93 27 01 	sts	0x0127, r23
}
     4dc:	2c 96       	adiw	r28, 0x0c	; 12
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	7f 90       	pop	r7
     502:	6f 90       	pop	r6
     504:	5f 90       	pop	r5
     506:	4f 90       	pop	r4
     508:	08 95       	ret

0000050a <main>:

int main(void)
{	float angle=0;
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <main+0x6>
     510:	00 d0       	rcall	.+0      	; 0x512 <main+0x8>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	USART_Init(51,1);
     516:	83 e3       	ldi	r24, 0x33	; 51
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	0e 94 29 05 	call	0xa52	; 0xa52 <USART_Init>
	DDRE = 0x00;
     520:	12 b8       	out	0x02, r1	; 2
	DDRD &= ~(1<<PD1); //A+ of encoder on interrupt pin PD1
     522:	89 98       	cbi	0x11, 1	; 17
	DDRD &= ~(1<<PD0);   //B+ of encoder on PD0
     524:	88 98       	cbi	0x11, 0	; 17
	interrupt_Initialise();	
     526:	0e 94 bf 00 	call	0x17e	; 0x17e <interrupt_Initialise>
	sei();
     52a:	78 94       	sei
	pwm_Init();
     52c:	0e 94 68 00 	call	0xd0	; 0xd0 <pwm_Init>
	pwm_Init_Motor();
     530:	0e 94 75 00 	call	0xea	; 0xea <pwm_Init_Motor>
	float prevDistance=0;

	USART_TransmitString("starting",1);
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	0e 94 6d 05 	call	0xada	; 0xada <USART_TransmitString>
	DDRD &= ~(1<<PD0);   //B+ of encoder on PD0
	interrupt_Initialise();	
	sei();
	pwm_Init();
	pwm_Init_Motor();
	float prevDistance=0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	dc 01       	movw	r26, r24
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	ab 83       	std	Y+3, r26	; 0x03
     54a:	bc 83       	std	Y+4, r27	; 0x04
	if((7-onsensors>=4) &&currentSensorReading<0)currentSensorReading--;
	else if((7-onsensors)>=4 && currentSensorReading>0)currentSensorReading++;
}

int main(void)
{	float angle=0;
     54c:	88 24       	eor	r8, r8
     54e:	44 24       	eor	r4, r4
     550:	bb 24       	eor	r11, r11
     552:	10 e0       	ldi	r17, 0x00	; 0
		    c=prevSensorReading-m*distance;
			prevDistance=distance;			
		}
		prevErrorFromEqn=newErrorFromEqn;
  		newErrorFromEqn=m*distance+c; 		 
 		if(!(sensor[0]==1&&sensor[1]==1&&sensor[2]==1&&sensor[3]==1&&sensor[4]==1&&sensor[5]==1&&sensor[6]==1))
     554:	01 e0       	ldi	r16, 0x01	; 1
     556:	33 24       	eor	r3, r3
		 {angle=newErrorFromEqn*angleConst + (newErrorFromEqn-prevErrorFromEqn)*kd;
		 }  		
		 if(angle>90)angle=90;
     558:	0f 2e       	mov	r0, r31
     55a:	f4 eb       	ldi	r31, 0xB4	; 180
     55c:	2f 2e       	mov	r2, r31
     55e:	f0 2d       	mov	r31, r0
	pwm_Init_Motor();
	float prevDistance=0;

	USART_TransmitString("starting",1);
	while(1)
    {		if(distance>(motorSensorDist/10)+prevDistance){
     560:	c0 90 20 01 	lds	r12, 0x0120
     564:	d0 90 21 01 	lds	r13, 0x0121
     568:	e0 90 22 01 	lds	r14, 0x0122
     56c:	f0 90 23 01 	lds	r15, 0x0123
     570:	69 81       	ldd	r22, Y+1	; 0x01
     572:	7a 81       	ldd	r23, Y+2	; 0x02
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     58a:	88 23       	and	r24, r24
     58c:	0c f0       	brlt	.+2      	; 0x590 <main+0x86>
     58e:	70 c0       	rjmp	.+224    	; 0x670 <main+0x166>
		    read_Sensor();
     590:	0e 94 c8 00 	call	0x190	; 0x190 <read_Sensor>
		    prevSensorReading=currentSensorReading;
     594:	80 91 24 01 	lds	r24, 0x0124
     598:	90 91 25 01 	lds	r25, 0x0125
     59c:	a0 91 26 01 	lds	r26, 0x0126
     5a0:	b0 91 27 01 	lds	r27, 0x0127
     5a4:	80 93 1c 01 	sts	0x011C, r24
     5a8:	90 93 1d 01 	sts	0x011D, r25
     5ac:	a0 93 1e 01 	sts	0x011E, r26
     5b0:	b0 93 1f 01 	sts	0x011F, r27
			calculate_Errror();	
     5b4:	0e 94 32 01 	call	0x264	; 0x264 <calculate_Errror>
			
			m=(currentSensorReading-prevSensorReading)/(motorSensorDist);
     5b8:	60 91 24 01 	lds	r22, 0x0124
     5bc:	70 91 25 01 	lds	r23, 0x0125
     5c0:	80 91 26 01 	lds	r24, 0x0126
     5c4:	90 91 27 01 	lds	r25, 0x0127
     5c8:	20 91 1c 01 	lds	r18, 0x011C
     5cc:	30 91 1d 01 	lds	r19, 0x011D
     5d0:	40 91 1e 01 	lds	r20, 0x011E
     5d4:	50 91 1f 01 	lds	r21, 0x011F
     5d8:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e1       	ldi	r20, 0x10	; 16
     5e2:	51 e4       	ldi	r21, 0x41	; 65
     5e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divsf3>
     5e8:	46 2f       	mov	r20, r22
     5ea:	57 2f       	mov	r21, r23
     5ec:	68 2f       	mov	r22, r24
     5ee:	79 2f       	mov	r23, r25
     5f0:	40 93 10 01 	sts	0x0110, r20
     5f4:	50 93 11 01 	sts	0x0111, r21
     5f8:	60 93 12 01 	sts	0x0112, r22
     5fc:	70 93 13 01 	sts	0x0113, r23
		   
		    c=prevSensorReading-m*distance;
     600:	c0 90 1c 01 	lds	r12, 0x011C
     604:	d0 90 1d 01 	lds	r13, 0x011D
     608:	e0 90 1e 01 	lds	r14, 0x011E
     60c:	f0 90 1f 01 	lds	r15, 0x011F
     610:	60 91 10 01 	lds	r22, 0x0110
     614:	70 91 11 01 	lds	r23, 0x0111
     618:	80 91 12 01 	lds	r24, 0x0112
     61c:	90 91 13 01 	lds	r25, 0x0113
     620:	20 91 20 01 	lds	r18, 0x0120
     624:	30 91 21 01 	lds	r19, 0x0121
     628:	40 91 22 01 	lds	r20, 0x0122
     62c:	50 91 23 01 	lds	r21, 0x0123
     630:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c7 01       	movw	r24, r14
     63a:	b6 01       	movw	r22, r12
     63c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
     640:	46 2f       	mov	r20, r22
     642:	57 2f       	mov	r21, r23
     644:	68 2f       	mov	r22, r24
     646:	79 2f       	mov	r23, r25
     648:	40 93 0c 01 	sts	0x010C, r20
     64c:	50 93 0d 01 	sts	0x010D, r21
     650:	60 93 0e 01 	sts	0x010E, r22
     654:	70 93 0f 01 	sts	0x010F, r23
			prevDistance=distance;			
     658:	80 91 20 01 	lds	r24, 0x0120
     65c:	90 91 21 01 	lds	r25, 0x0121
     660:	a0 91 22 01 	lds	r26, 0x0122
     664:	b0 91 23 01 	lds	r27, 0x0123
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	9a 83       	std	Y+2, r25	; 0x02
     66c:	ab 83       	std	Y+3, r26	; 0x03
     66e:	bc 83       	std	Y+4, r27	; 0x04
		}
		prevErrorFromEqn=newErrorFromEqn;
     670:	80 91 18 01 	lds	r24, 0x0118
     674:	90 91 19 01 	lds	r25, 0x0119
     678:	a0 91 1a 01 	lds	r26, 0x011A
     67c:	b0 91 1b 01 	lds	r27, 0x011B
     680:	80 93 14 01 	sts	0x0114, r24
     684:	90 93 15 01 	sts	0x0115, r25
     688:	a0 93 16 01 	sts	0x0116, r26
     68c:	b0 93 17 01 	sts	0x0117, r27
  		newErrorFromEqn=m*distance+c; 		 
     690:	60 91 10 01 	lds	r22, 0x0110
     694:	70 91 11 01 	lds	r23, 0x0111
     698:	80 91 12 01 	lds	r24, 0x0112
     69c:	90 91 13 01 	lds	r25, 0x0113
     6a0:	20 91 20 01 	lds	r18, 0x0120
     6a4:	30 91 21 01 	lds	r19, 0x0121
     6a8:	40 91 22 01 	lds	r20, 0x0122
     6ac:	50 91 23 01 	lds	r21, 0x0123
     6b0:	c0 90 0c 01 	lds	r12, 0x010C
     6b4:	d0 90 0d 01 	lds	r13, 0x010D
     6b8:	e0 90 0e 01 	lds	r14, 0x010E
     6bc:	f0 90 0f 01 	lds	r15, 0x010F
     6c0:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     6c4:	a7 01       	movw	r20, r14
     6c6:	96 01       	movw	r18, r12
     6c8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     6cc:	46 2f       	mov	r20, r22
     6ce:	57 2f       	mov	r21, r23
     6d0:	68 2f       	mov	r22, r24
     6d2:	79 2f       	mov	r23, r25
     6d4:	40 93 18 01 	sts	0x0118, r20
     6d8:	50 93 19 01 	sts	0x0119, r21
     6dc:	60 93 1a 01 	sts	0x011A, r22
     6e0:	70 93 1b 01 	sts	0x011B, r23
 		if(!(sensor[0]==1&&sensor[1]==1&&sensor[2]==1&&sensor[3]==1&&sensor[4]==1&&sensor[5]==1&&sensor[6]==1))
     6e4:	a8 e2       	ldi	r26, 0x28	; 40
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	6d 91       	ld	r22, X+
     6ea:	7d 91       	ld	r23, X+
     6ec:	8d 91       	ld	r24, X+
     6ee:	9c 91       	ld	r25, X
     6f0:	f0 2e       	mov	r15, r16
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e8       	ldi	r20, 0x80	; 128
     6f8:	5f e3       	ldi	r21, 0x3F	; 63
     6fa:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     6fe:	81 11       	cpse	r24, r1
     700:	f3 2c       	mov	r15, r3
     702:	ff 20       	and	r15, r15
     704:	09 f4       	brne	.+2      	; 0x708 <main+0x1fe>
     706:	68 c0       	rjmp	.+208    	; 0x7d8 <main+0x2ce>
     708:	ec e2       	ldi	r30, 0x2C	; 44
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	60 81       	ld	r22, Z
     70e:	71 81       	ldd	r23, Z+1	; 0x01
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	93 81       	ldd	r25, Z+3	; 0x03
     714:	f0 2e       	mov	r15, r16
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e8       	ldi	r20, 0x80	; 128
     71c:	5f e3       	ldi	r21, 0x3F	; 63
     71e:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     722:	81 11       	cpse	r24, r1
     724:	f3 2c       	mov	r15, r3
     726:	ff 20       	and	r15, r15
     728:	09 f4       	brne	.+2      	; 0x72c <main+0x222>
     72a:	56 c0       	rjmp	.+172    	; 0x7d8 <main+0x2ce>
     72c:	a0 e3       	ldi	r26, 0x30	; 48
     72e:	b1 e0       	ldi	r27, 0x01	; 1
     730:	6d 91       	ld	r22, X+
     732:	7d 91       	ld	r23, X+
     734:	8d 91       	ld	r24, X+
     736:	9c 91       	ld	r25, X
     738:	f0 2e       	mov	r15, r16
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e8       	ldi	r20, 0x80	; 128
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     746:	81 11       	cpse	r24, r1
     748:	f3 2c       	mov	r15, r3
     74a:	ff 20       	and	r15, r15
     74c:	09 f4       	brne	.+2      	; 0x750 <main+0x246>
     74e:	44 c0       	rjmp	.+136    	; 0x7d8 <main+0x2ce>
     750:	e4 e3       	ldi	r30, 0x34	; 52
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	60 81       	ld	r22, Z
     756:	71 81       	ldd	r23, Z+1	; 0x01
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	f0 2e       	mov	r15, r16
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     76a:	81 11       	cpse	r24, r1
     76c:	f3 2c       	mov	r15, r3
     76e:	ff 20       	and	r15, r15
     770:	99 f1       	breq	.+102    	; 0x7d8 <main+0x2ce>
     772:	a8 e3       	ldi	r26, 0x38	; 56
     774:	b1 e0       	ldi	r27, 0x01	; 1
     776:	6d 91       	ld	r22, X+
     778:	7d 91       	ld	r23, X+
     77a:	8d 91       	ld	r24, X+
     77c:	9c 91       	ld	r25, X
     77e:	f0 2e       	mov	r15, r16
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e8       	ldi	r20, 0x80	; 128
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     78c:	81 11       	cpse	r24, r1
     78e:	f3 2c       	mov	r15, r3
     790:	ff 20       	and	r15, r15
     792:	11 f1       	breq	.+68     	; 0x7d8 <main+0x2ce>
     794:	ec e3       	ldi	r30, 0x3C	; 60
     796:	f1 e0       	ldi	r31, 0x01	; 1
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	f0 2e       	mov	r15, r16
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e8       	ldi	r20, 0x80	; 128
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     7ae:	81 11       	cpse	r24, r1
     7b0:	f3 2c       	mov	r15, r3
     7b2:	ff 20       	and	r15, r15
     7b4:	89 f0       	breq	.+34     	; 0x7d8 <main+0x2ce>
     7b6:	a0 e4       	ldi	r26, 0x40	; 64
     7b8:	b1 e0       	ldi	r27, 0x01	; 1
     7ba:	6d 91       	ld	r22, X+
     7bc:	7d 91       	ld	r23, X+
     7be:	8d 91       	ld	r24, X+
     7c0:	9c 91       	ld	r25, X
     7c2:	f0 2e       	mov	r15, r16
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e8       	ldi	r20, 0x80	; 128
     7ca:	5f e3       	ldi	r21, 0x3F	; 63
     7cc:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     7d0:	81 11       	cpse	r24, r1
     7d2:	f3 2c       	mov	r15, r3
     7d4:	ff 20       	and	r15, r15
     7d6:	81 f5       	brne	.+96     	; 0x838 <main+0x32e>
		 {angle=newErrorFromEqn*angleConst + (newErrorFromEqn-prevErrorFromEqn)*kd;
     7d8:	60 91 18 01 	lds	r22, 0x0118
     7dc:	70 91 19 01 	lds	r23, 0x0119
     7e0:	80 91 1a 01 	lds	r24, 0x011A
     7e4:	90 91 1b 01 	lds	r25, 0x011B
     7e8:	c0 90 18 01 	lds	r12, 0x0118
     7ec:	d0 90 19 01 	lds	r13, 0x0119
     7f0:	e0 90 1a 01 	lds	r14, 0x011A
     7f4:	f0 90 1b 01 	lds	r15, 0x011B
     7f8:	80 90 14 01 	lds	r8, 0x0114
     7fc:	90 90 15 01 	lds	r9, 0x0115
     800:	a0 90 16 01 	lds	r10, 0x0116
     804:	b0 90 17 01 	lds	r11, 0x0117
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e2       	ldi	r20, 0x20	; 32
     80e:	51 e4       	ldi	r21, 0x41	; 65
     810:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     814:	2b 01       	movw	r4, r22
     816:	3c 01       	movw	r6, r24
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	a5 01       	movw	r20, r10
     81e:	94 01       	movw	r18, r8
     820:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	c3 01       	movw	r24, r6
     82a:	b2 01       	movw	r22, r4
     82c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     830:	86 2e       	mov	r8, r22
     832:	47 2e       	mov	r4, r23
     834:	b8 2e       	mov	r11, r24
     836:	19 2f       	mov	r17, r25
		 }  		
		 if(angle>90)angle=90;
     838:	88 2d       	mov	r24, r8
     83a:	94 2d       	mov	r25, r4
     83c:	ab 2d       	mov	r26, r11
     83e:	b1 2f       	mov	r27, r17
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	44 eb       	ldi	r20, 0xB4	; 180
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	0e 94 72 07 	call	0xee4	; 0xee4 <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	0c f4       	brge	.+2      	; 0x856 <main+0x34c>
     854:	81 c0       	rjmp	.+258    	; 0x958 <main+0x44e>
  		if(angle<-90)angle=-90;
     856:	88 2d       	mov	r24, r8
     858:	94 2d       	mov	r25, r4
     85a:	ab 2d       	mov	r26, r11
     85c:	b1 2f       	mov	r27, r17
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	44 eb       	ldi	r20, 0xB4	; 180
     868:	52 ec       	ldi	r21, 0xC2	; 194
     86a:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	0c f4       	brge	.+2      	; 0x874 <main+0x36a>
     872:	5e c0       	rjmp	.+188    	; 0x930 <main+0x426>
  		USART_TransmitNumber(angle,1);
     874:	88 2d       	mov	r24, r8
     876:	94 2d       	mov	r25, r4
     878:	ab 2d       	mov	r26, r11
     87a:	b1 2f       	mov	r27, r17
     87c:	bc 01       	movw	r22, r24
     87e:	cd 01       	movw	r24, r26
     880:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     884:	40 2f       	mov	r20, r16
     886:	0e 94 80 05 	call	0xb00	; 0xb00 <USART_TransmitNumber>
		USART_Transmitchar(0x0d,1);
     88a:	8d e0       	ldi	r24, 0x0D	; 13
     88c:	60 2f       	mov	r22, r16
     88e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
		moveServo_to_angle(angle);
     892:	88 2d       	mov	r24, r8
     894:	94 2d       	mov	r25, r4
     896:	ab 2d       	mov	r26, r11
     898:	b1 2f       	mov	r27, r17
     89a:	bc 01       	movw	r22, r24
     89c:	cd 01       	movw	r24, r26
     89e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fixsfsi>
     8a2:	dc 01       	movw	r26, r24
     8a4:	cb 01       	movw	r24, r22
     8a6:	0e 94 a3 00 	call	0x146	; 0x146 <moveServo_to_angle>
		
		if(angle*angle<=225)motor_speed_percent(80,80);
     8aa:	88 2d       	mov	r24, r8
     8ac:	94 2d       	mov	r25, r4
     8ae:	ab 2d       	mov	r26, r11
     8b0:	b1 2f       	mov	r27, r17
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	c8 2c       	mov	r12, r8
     8b8:	d4 2c       	mov	r13, r4
     8ba:	eb 2c       	mov	r14, r11
     8bc:	f1 2e       	mov	r15, r17
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	0e 94 76 07 	call	0xeec	; 0xeec <__mulsf3>
     8c6:	d6 2e       	mov	r13, r22
     8c8:	f7 2e       	mov	r15, r23
     8ca:	e8 2e       	mov	r14, r24
     8cc:	c9 2e       	mov	r12, r25
     8ce:	86 2f       	mov	r24, r22
     8d0:	9f 2d       	mov	r25, r15
     8d2:	ae 2d       	mov	r26, r14
     8d4:	bc 2d       	mov	r27, r12
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	41 e6       	ldi	r20, 0x61	; 97
     8e0:	53 e4       	ldi	r21, 0x43	; 67
     8e2:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     8e6:	18 16       	cp	r1, r24
     8e8:	3c f0       	brlt	.+14     	; 0x8f8 <main+0x3ee>
     8ea:	80 e5       	ldi	r24, 0x50	; 80
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	60 e5       	ldi	r22, 0x50	; 80
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_speed_percent>
     8f6:	34 ce       	rjmp	.-920    	; 0x560 <main+0x56>
		else if(angle*angle<=400) motor_speed_percent(70,70);
     8f8:	8d 2d       	mov	r24, r13
     8fa:	9f 2d       	mov	r25, r15
     8fc:	ae 2d       	mov	r26, r14
     8fe:	bc 2d       	mov	r27, r12
     900:	bc 01       	movw	r22, r24
     902:	cd 01       	movw	r24, r26
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	48 ec       	ldi	r20, 0xC8	; 200
     90a:	53 e4       	ldi	r21, 0x43	; 67
     90c:	0e 94 23 06 	call	0xc46	; 0xc46 <__cmpsf2>
     910:	18 16       	cp	r1, r24
     912:	3c f0       	brlt	.+14     	; 0x922 <main+0x418>
     914:	86 e4       	ldi	r24, 0x46	; 70
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	66 e4       	ldi	r22, 0x46	; 70
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_speed_percent>
     920:	1f ce       	rjmp	.-962    	; 0x560 <main+0x56>
		else motor_speed_percent(60,60);
     922:	8c e3       	ldi	r24, 0x3C	; 60
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	6c e3       	ldi	r22, 0x3C	; 60
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	0e 94 7c 00 	call	0xf8	; 0xf8 <motor_speed_percent>
     92e:	18 ce       	rjmp	.-976    	; 0x560 <main+0x56>
 		if(!(sensor[0]==1&&sensor[1]==1&&sensor[2]==1&&sensor[3]==1&&sensor[4]==1&&sensor[5]==1&&sensor[6]==1))
		 {angle=newErrorFromEqn*angleConst + (newErrorFromEqn-prevErrorFromEqn)*kd;
		 }  		
		 if(angle>90)angle=90;
  		if(angle<-90)angle=-90;
  		USART_TransmitNumber(angle,1);
     930:	66 ea       	ldi	r22, 0xA6	; 166
     932:	7f ef       	ldi	r23, 0xFF	; 255
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	40 2f       	mov	r20, r16
     93a:	0e 94 80 05 	call	0xb00	; 0xb00 <USART_TransmitNumber>
		USART_Transmitchar(0x0d,1);
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	60 2f       	mov	r22, r16
     942:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
		moveServo_to_angle(angle);
     946:	86 ea       	ldi	r24, 0xA6	; 166
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	0e 94 a3 00 	call	0x146	; 0x146 <moveServo_to_angle>
  		newErrorFromEqn=m*distance+c; 		 
 		if(!(sensor[0]==1&&sensor[1]==1&&sensor[2]==1&&sensor[3]==1&&sensor[4]==1&&sensor[5]==1&&sensor[6]==1))
		 {angle=newErrorFromEqn*angleConst + (newErrorFromEqn-prevErrorFromEqn)*kd;
		 }  		
		 if(angle>90)angle=90;
  		if(angle<-90)angle=-90;
     94e:	83 2c       	mov	r8, r3
     950:	43 2c       	mov	r4, r3
     952:	b2 2c       	mov	r11, r2
     954:	12 ec       	ldi	r17, 0xC2	; 194
     956:	e5 cf       	rjmp	.-54     	; 0x922 <main+0x418>
  		USART_TransmitNumber(angle,1);
     958:	6a e5       	ldi	r22, 0x5A	; 90
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	40 2f       	mov	r20, r16
     962:	0e 94 80 05 	call	0xb00	; 0xb00 <USART_TransmitNumber>
		USART_Transmitchar(0x0d,1);
     966:	8d e0       	ldi	r24, 0x0D	; 13
     968:	60 2f       	mov	r22, r16
     96a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
		moveServo_to_angle(angle);
     96e:	8a e5       	ldi	r24, 0x5A	; 90
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 a3 00 	call	0x146	; 0x146 <moveServo_to_angle>
		
		if(angle*angle<=225)motor_speed_percent(80,80);
     976:	d3 2c       	mov	r13, r3
     978:	ff 24       	eor	r15, r15
     97a:	68 94       	set
     97c:	f5 f8       	bld	r15, 5
     97e:	0f 2e       	mov	r0, r31
     980:	fd ef       	ldi	r31, 0xFD	; 253
     982:	ef 2e       	mov	r14, r31
     984:	f0 2d       	mov	r31, r0
     986:	0f 2e       	mov	r0, r31
     988:	f5 e4       	ldi	r31, 0x45	; 69
     98a:	cf 2e       	mov	r12, r31
     98c:	f0 2d       	mov	r31, r0
		prevErrorFromEqn=newErrorFromEqn;
  		newErrorFromEqn=m*distance+c; 		 
 		if(!(sensor[0]==1&&sensor[1]==1&&sensor[2]==1&&sensor[3]==1&&sensor[4]==1&&sensor[5]==1&&sensor[6]==1))
		 {angle=newErrorFromEqn*angleConst + (newErrorFromEqn-prevErrorFromEqn)*kd;
		 }  		
		 if(angle>90)angle=90;
     98e:	83 2c       	mov	r8, r3
     990:	43 2c       	mov	r4, r3
     992:	b2 2c       	mov	r11, r2
     994:	12 e4       	ldi	r17, 0x42	; 66
     996:	b0 cf       	rjmp	.-160    	; 0x8f8 <main+0x3ee>

00000998 <__vector_1>:
		else motor_speed_percent(60,60);
		
	}
}

ISR(INT0_vect){			
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	if(bit_is_set(PIND,1)) {
     9be:	81 9b       	sbis	0x10, 1	; 16
     9c0:	1b c0       	rjmp	.+54     	; 0x9f8 <__vector_1+0x60>
		distance += distancePerTick;	
     9c2:	60 91 20 01 	lds	r22, 0x0120
     9c6:	70 91 21 01 	lds	r23, 0x0121
     9ca:	80 91 22 01 	lds	r24, 0x0122
     9ce:	90 91 23 01 	lds	r25, 0x0123
     9d2:	26 ec       	ldi	r18, 0xC6	; 198
     9d4:	33 e3       	ldi	r19, 0x33	; 51
     9d6:	48 e6       	ldi	r20, 0x68	; 104
     9d8:	5d e3       	ldi	r21, 0x3D	; 61
     9da:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__addsf3>
     9de:	46 2f       	mov	r20, r22
     9e0:	57 2f       	mov	r21, r23
     9e2:	68 2f       	mov	r22, r24
     9e4:	79 2f       	mov	r23, r25
     9e6:	40 93 20 01 	sts	0x0120, r20
     9ea:	50 93 21 01 	sts	0x0121, r21
     9ee:	60 93 22 01 	sts	0x0122, r22
     9f2:	70 93 23 01 	sts	0x0123, r23
     9f6:	1a c0       	rjmp	.+52     	; 0xa2c <__vector_1+0x94>
	} else {
		distance -= distancePerTick;
     9f8:	60 91 20 01 	lds	r22, 0x0120
     9fc:	70 91 21 01 	lds	r23, 0x0121
     a00:	80 91 22 01 	lds	r24, 0x0122
     a04:	90 91 23 01 	lds	r25, 0x0123
     a08:	26 ec       	ldi	r18, 0xC6	; 198
     a0a:	33 e3       	ldi	r19, 0x33	; 51
     a0c:	48 e6       	ldi	r20, 0x68	; 104
     a0e:	5d e3       	ldi	r21, 0x3D	; 61
     a10:	0e 94 be 05 	call	0xb7c	; 0xb7c <__subsf3>
     a14:	46 2f       	mov	r20, r22
     a16:	57 2f       	mov	r21, r23
     a18:	68 2f       	mov	r22, r24
     a1a:	79 2f       	mov	r23, r25
     a1c:	40 93 20 01 	sts	0x0120, r20
     a20:	50 93 21 01 	sts	0x0121, r21
     a24:	60 93 22 01 	sts	0x0122, r22
     a28:	70 93 23 01 	sts	0x0123, r23
	}	
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <USART_Init>:



void USART_Init( unsigned int baud, uint8_t n )
{
	sei();
     a52:	78 94       	sei
	if(n)
     a54:	66 23       	and	r22, r22
     a56:	79 f0       	breq	.+30     	; 0xa76 <USART_Init+0x24>
	{
		//Initialize baud Rate(4800)
		UBRR1H=(unsigned char)(baud>>8);
     a58:	90 93 98 00 	sts	0x0098, r25
		UBRR1L=(unsigned char)baud;
     a5c:	80 93 99 00 	sts	0x0099, r24
		//TX RX Enable
		UCSR1B|=(1<<RXEN0)|(1<<TXEN0);
     a60:	ea e9       	ldi	r30, 0x9A	; 154
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	88 61       	ori	r24, 0x18	; 24
     a68:	80 83       	st	Z, r24
		//Set 8-bit data, Parity disabled
		UCSR1C |=(3<<UCSZ10);
     a6a:	ed e9       	ldi	r30, 0x9D	; 157
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	86 60       	ori	r24, 0x06	; 6
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret
		
	}else
	{
		//Initialize baud Rate(9600)
		UBRR0H=(unsigned char)(baud>>8);
     a76:	90 93 90 00 	sts	0x0090, r25
		UBRR0L=(unsigned char)baud;
     a7a:	89 b9       	out	0x09, r24	; 9
		//TX RX Enable
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);//|(1<<UCSZ02);
     a7c:	8a b1       	in	r24, 0x0a	; 10
     a7e:	88 61       	ori	r24, 0x18	; 24
     a80:	8a b9       	out	0x0a, r24	; 10
		//Set 8-bit data, Parity disabled
		UCSR0C |= (3<<UCSZ00);
     a82:	e5 e9       	ldi	r30, 0x95	; 149
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	86 60       	ori	r24, 0x06	; 6
     a8a:	80 83       	st	Z, r24
     a8c:	08 95       	ret

00000a8e <USART_InterruptEnable>:
	
}

void USART_InterruptEnable(uint8_t n)
{
	if(n)
     a8e:	88 23       	and	r24, r24
     a90:	31 f0       	breq	.+12     	; 0xa9e <USART_InterruptEnable+0x10>
	{
		UCSR1B|=(1<<RXCIE1);
     a92:	ea e9       	ldi	r30, 0x9A	; 154
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	80 68       	ori	r24, 0x80	; 128
     a9a:	80 83       	st	Z, r24
     a9c:	08 95       	ret
	}
	else UCSR0B|=(1<<RXCIE0);
     a9e:	57 9a       	sbi	0x0a, 7	; 10
     aa0:	08 95       	ret

00000aa2 <USART_Transmitchar>:
}

void USART_Transmitchar( unsigned char data, uint8_t n )
{
	if(n)
     aa2:	66 23       	and	r22, r22
     aa4:	41 f0       	breq	.+16     	; 0xab6 <USART_Transmitchar+0x14>
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
     aa6:	eb e9       	ldi	r30, 0x9B	; 155
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	90 81       	ld	r25, Z
     aac:	95 ff       	sbrs	r25, 5
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <USART_Transmitchar+0x8>
		UDR1=data;
     ab0:	80 93 9c 00 	sts	0x009C, r24
     ab4:	08 95       	ret
	}else
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <USART_Transmitchar+0x14>
		UDR0=data;
     aba:	8c b9       	out	0x0c, r24	; 12
     abc:	08 95       	ret

00000abe <USART_Receive>:
	}
}

unsigned char USART_Receive(uint8_t n )
{
	if(n)
     abe:	88 23       	and	r24, r24
     ac0:	41 f0       	breq	.+16     	; 0xad2 <USART_Receive+0x14>
	{
		while (! (UCSR1A & (1 << RXC1)) );
     ac2:	eb e9       	ldi	r30, 0x9B	; 155
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	88 23       	and	r24, r24
     aca:	ec f7       	brge	.-6      	; 0xac6 <USART_Receive+0x8>
    	return UDR1;
     acc:	80 91 9c 00 	lds	r24, 0x009C
     ad0:	08 95       	ret
	}else 
	{
		while (! (UCSR0A & (1 << RXC0)) );
     ad2:	5f 9b       	sbis	0x0b, 7	; 11
     ad4:	fe cf       	rjmp	.-4      	; 0xad2 <USART_Receive+0x14>
    	return UDR0;
     ad6:	8c b1       	in	r24, 0x0c	; 12
	}
}
     ad8:	08 95       	ret

00000ada <USART_TransmitString>:



void USART_TransmitString(char *str, uint8_t n)
{
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	16 2f       	mov	r17, r22
	 while(*str>0)
     ae4:	88 81       	ld	r24, Y
     ae6:	88 23       	and	r24, r24
     ae8:	39 f0       	breq	.+14     	; 0xaf8 <USART_TransmitString+0x1e>
	}
}



void USART_TransmitString(char *str, uint8_t n)
     aea:	21 96       	adiw	r28, 0x01	; 1
{
	 while(*str>0)
	 {
		 USART_Transmitchar(*str,n);
     aec:	61 2f       	mov	r22, r17
     aee:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>



void USART_TransmitString(char *str, uint8_t n)
{
	 while(*str>0)
     af2:	89 91       	ld	r24, Y+
     af4:	88 23       	and	r24, r24
     af6:	d1 f7       	brne	.-12     	; 0xaec <USART_TransmitString+0x12>
	 {
		 USART_Transmitchar(*str,n);
		 //_delay_ms(1);
		 str++;
	 }
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <USART_TransmitNumber>:

void USART_TransmitNumber(long int num, uint8_t n)
{
     b00:	bf 92       	push	r11
     b02:	cf 92       	push	r12
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	6b 01       	movw	r12, r22
     b14:	7c 01       	movw	r14, r24
     b16:	c4 2f       	mov	r28, r20
	if(num<0)
     b18:	99 23       	and	r25, r25
     b1a:	64 f4       	brge	.+24     	; 0xb34 <USART_TransmitNumber+0x34>
	{
		USART_Transmitchar('-',n);
     b1c:	8d e2       	ldi	r24, 0x2D	; 45
     b1e:	64 2f       	mov	r22, r20
     b20:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
		num=(-1)*num;
     b24:	f0 94       	com	r15
     b26:	e0 94       	com	r14
     b28:	d0 94       	com	r13
     b2a:	c0 94       	com	r12
     b2c:	c1 1c       	adc	r12, r1
     b2e:	d1 1c       	adc	r13, r1
     b30:	e1 1c       	adc	r14, r1
     b32:	f1 1c       	adc	r15, r1
	}
	
	if(num >= 10){
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	c8 16       	cp	r12, r24
     b38:	d1 04       	cpc	r13, r1
     b3a:	e1 04       	cpc	r14, r1
     b3c:	f1 04       	cpc	r15, r1
     b3e:	7c f0       	brlt	.+30     	; 0xb5e <USART_TransmitNumber+0x5e>
    USART_TransmitNumber(num/10,n);
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
     b44:	2a e0       	ldi	r18, 0x0A	; 10
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__divmodsi4>
     b50:	d6 2f       	mov	r29, r22
     b52:	ca 01       	movw	r24, r20
     b54:	b9 01       	movw	r22, r18
     b56:	4c 2f       	mov	r20, r28
     b58:	0e 94 80 05 	call	0xb00	; 0xb00 <USART_TransmitNumber>
    num = num%10;
     b5c:	cd 2e       	mov	r12, r29
  }
  USART_Transmitchar(num+'0',n); /* n is between 0 and 9 */
     b5e:	8c 2d       	mov	r24, r12
     b60:	80 5d       	subi	r24, 0xD0	; 208
     b62:	6c 2f       	mov	r22, r28
     b64:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USART_Transmitchar>
	
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	bf 90       	pop	r11
     b7a:	08 95       	ret

00000b7c <__subsf3>:
     b7c:	50 58       	subi	r21, 0x80	; 128

00000b7e <__addsf3>:
     b7e:	bb 27       	eor	r27, r27
     b80:	aa 27       	eor	r26, r26
     b82:	0e d0       	rcall	.+28     	; 0xba0 <__addsf3x>
     b84:	75 c1       	rjmp	.+746    	; 0xe70 <__fp_round>
     b86:	66 d1       	rcall	.+716    	; 0xe54 <__fp_pscA>
     b88:	30 f0       	brcs	.+12     	; 0xb96 <__addsf3+0x18>
     b8a:	6b d1       	rcall	.+726    	; 0xe62 <__fp_pscB>
     b8c:	20 f0       	brcs	.+8      	; 0xb96 <__addsf3+0x18>
     b8e:	31 f4       	brne	.+12     	; 0xb9c <__addsf3+0x1e>
     b90:	9f 3f       	cpi	r25, 0xFF	; 255
     b92:	11 f4       	brne	.+4      	; 0xb98 <__addsf3+0x1a>
     b94:	1e f4       	brtc	.+6      	; 0xb9c <__addsf3+0x1e>
     b96:	5b c1       	rjmp	.+694    	; 0xe4e <__fp_nan>
     b98:	0e f4       	brtc	.+2      	; 0xb9c <__addsf3+0x1e>
     b9a:	e0 95       	com	r30
     b9c:	e7 fb       	bst	r30, 7
     b9e:	51 c1       	rjmp	.+674    	; 0xe42 <__fp_inf>

00000ba0 <__addsf3x>:
     ba0:	e9 2f       	mov	r30, r25
     ba2:	77 d1       	rcall	.+750    	; 0xe92 <__fp_split3>
     ba4:	80 f3       	brcs	.-32     	; 0xb86 <__addsf3+0x8>
     ba6:	ba 17       	cp	r27, r26
     ba8:	62 07       	cpc	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	18 f0       	brcs	.+6      	; 0xbb8 <__addsf3x+0x18>
     bb2:	71 f4       	brne	.+28     	; 0xbd0 <__addsf3x+0x30>
     bb4:	9e f5       	brtc	.+102    	; 0xc1c <__addsf3x+0x7c>
     bb6:	8f c1       	rjmp	.+798    	; 0xed6 <__fp_zero>
     bb8:	0e f4       	brtc	.+2      	; 0xbbc <__addsf3x+0x1c>
     bba:	e0 95       	com	r30
     bbc:	0b 2e       	mov	r0, r27
     bbe:	ba 2f       	mov	r27, r26
     bc0:	a0 2d       	mov	r26, r0
     bc2:	0b 01       	movw	r0, r22
     bc4:	b9 01       	movw	r22, r18
     bc6:	90 01       	movw	r18, r0
     bc8:	0c 01       	movw	r0, r24
     bca:	ca 01       	movw	r24, r20
     bcc:	a0 01       	movw	r20, r0
     bce:	11 24       	eor	r1, r1
     bd0:	ff 27       	eor	r31, r31
     bd2:	59 1b       	sub	r21, r25
     bd4:	99 f0       	breq	.+38     	; 0xbfc <__addsf3x+0x5c>
     bd6:	59 3f       	cpi	r21, 0xF9	; 249
     bd8:	50 f4       	brcc	.+20     	; 0xbee <__addsf3x+0x4e>
     bda:	50 3e       	cpi	r21, 0xE0	; 224
     bdc:	68 f1       	brcs	.+90     	; 0xc38 <__addsf3x+0x98>
     bde:	1a 16       	cp	r1, r26
     be0:	f0 40       	sbci	r31, 0x00	; 0
     be2:	a2 2f       	mov	r26, r18
     be4:	23 2f       	mov	r18, r19
     be6:	34 2f       	mov	r19, r20
     be8:	44 27       	eor	r20, r20
     bea:	58 5f       	subi	r21, 0xF8	; 248
     bec:	f3 cf       	rjmp	.-26     	; 0xbd4 <__addsf3x+0x34>
     bee:	46 95       	lsr	r20
     bf0:	37 95       	ror	r19
     bf2:	27 95       	ror	r18
     bf4:	a7 95       	ror	r26
     bf6:	f0 40       	sbci	r31, 0x00	; 0
     bf8:	53 95       	inc	r21
     bfa:	c9 f7       	brne	.-14     	; 0xbee <__addsf3x+0x4e>
     bfc:	7e f4       	brtc	.+30     	; 0xc1c <__addsf3x+0x7c>
     bfe:	1f 16       	cp	r1, r31
     c00:	ba 0b       	sbc	r27, r26
     c02:	62 0b       	sbc	r22, r18
     c04:	73 0b       	sbc	r23, r19
     c06:	84 0b       	sbc	r24, r20
     c08:	ba f0       	brmi	.+46     	; 0xc38 <__addsf3x+0x98>
     c0a:	91 50       	subi	r25, 0x01	; 1
     c0c:	a1 f0       	breq	.+40     	; 0xc36 <__addsf3x+0x96>
     c0e:	ff 0f       	add	r31, r31
     c10:	bb 1f       	adc	r27, r27
     c12:	66 1f       	adc	r22, r22
     c14:	77 1f       	adc	r23, r23
     c16:	88 1f       	adc	r24, r24
     c18:	c2 f7       	brpl	.-16     	; 0xc0a <__addsf3x+0x6a>
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <__addsf3x+0x98>
     c1c:	ba 0f       	add	r27, r26
     c1e:	62 1f       	adc	r22, r18
     c20:	73 1f       	adc	r23, r19
     c22:	84 1f       	adc	r24, r20
     c24:	48 f4       	brcc	.+18     	; 0xc38 <__addsf3x+0x98>
     c26:	87 95       	ror	r24
     c28:	77 95       	ror	r23
     c2a:	67 95       	ror	r22
     c2c:	b7 95       	ror	r27
     c2e:	f7 95       	ror	r31
     c30:	9e 3f       	cpi	r25, 0xFE	; 254
     c32:	08 f0       	brcs	.+2      	; 0xc36 <__addsf3x+0x96>
     c34:	b3 cf       	rjmp	.-154    	; 0xb9c <__addsf3+0x1e>
     c36:	93 95       	inc	r25
     c38:	88 0f       	add	r24, r24
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <__addsf3x+0x9e>
     c3c:	99 27       	eor	r25, r25
     c3e:	ee 0f       	add	r30, r30
     c40:	97 95       	ror	r25
     c42:	87 95       	ror	r24
     c44:	08 95       	ret

00000c46 <__cmpsf2>:
     c46:	d9 d0       	rcall	.+434    	; 0xdfa <__fp_cmp>
     c48:	08 f4       	brcc	.+2      	; 0xc4c <__cmpsf2+0x6>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	08 95       	ret

00000c4e <__divsf3>:
     c4e:	0c d0       	rcall	.+24     	; 0xc68 <__divsf3x>
     c50:	0f c1       	rjmp	.+542    	; 0xe70 <__fp_round>
     c52:	07 d1       	rcall	.+526    	; 0xe62 <__fp_pscB>
     c54:	40 f0       	brcs	.+16     	; 0xc66 <__divsf3+0x18>
     c56:	fe d0       	rcall	.+508    	; 0xe54 <__fp_pscA>
     c58:	30 f0       	brcs	.+12     	; 0xc66 <__divsf3+0x18>
     c5a:	21 f4       	brne	.+8      	; 0xc64 <__divsf3+0x16>
     c5c:	5f 3f       	cpi	r21, 0xFF	; 255
     c5e:	19 f0       	breq	.+6      	; 0xc66 <__divsf3+0x18>
     c60:	f0 c0       	rjmp	.+480    	; 0xe42 <__fp_inf>
     c62:	51 11       	cpse	r21, r1
     c64:	39 c1       	rjmp	.+626    	; 0xed8 <__fp_szero>
     c66:	f3 c0       	rjmp	.+486    	; 0xe4e <__fp_nan>

00000c68 <__divsf3x>:
     c68:	14 d1       	rcall	.+552    	; 0xe92 <__fp_split3>
     c6a:	98 f3       	brcs	.-26     	; 0xc52 <__divsf3+0x4>

00000c6c <__divsf3_pse>:
     c6c:	99 23       	and	r25, r25
     c6e:	c9 f3       	breq	.-14     	; 0xc62 <__divsf3+0x14>
     c70:	55 23       	and	r21, r21
     c72:	b1 f3       	breq	.-20     	; 0xc60 <__divsf3+0x12>
     c74:	95 1b       	sub	r25, r21
     c76:	55 0b       	sbc	r21, r21
     c78:	bb 27       	eor	r27, r27
     c7a:	aa 27       	eor	r26, r26
     c7c:	62 17       	cp	r22, r18
     c7e:	73 07       	cpc	r23, r19
     c80:	84 07       	cpc	r24, r20
     c82:	38 f0       	brcs	.+14     	; 0xc92 <__divsf3_pse+0x26>
     c84:	9f 5f       	subi	r25, 0xFF	; 255
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	44 1f       	adc	r20, r20
     c8e:	aa 1f       	adc	r26, r26
     c90:	a9 f3       	breq	.-22     	; 0xc7c <__divsf3_pse+0x10>
     c92:	33 d0       	rcall	.+102    	; 0xcfa <__divsf3_pse+0x8e>
     c94:	0e 2e       	mov	r0, r30
     c96:	3a f0       	brmi	.+14     	; 0xca6 <__divsf3_pse+0x3a>
     c98:	e0 e8       	ldi	r30, 0x80	; 128
     c9a:	30 d0       	rcall	.+96     	; 0xcfc <__divsf3_pse+0x90>
     c9c:	91 50       	subi	r25, 0x01	; 1
     c9e:	50 40       	sbci	r21, 0x00	; 0
     ca0:	e6 95       	lsr	r30
     ca2:	00 1c       	adc	r0, r0
     ca4:	ca f7       	brpl	.-14     	; 0xc98 <__divsf3_pse+0x2c>
     ca6:	29 d0       	rcall	.+82     	; 0xcfa <__divsf3_pse+0x8e>
     ca8:	fe 2f       	mov	r31, r30
     caa:	27 d0       	rcall	.+78     	; 0xcfa <__divsf3_pse+0x8e>
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	bb 1f       	adc	r27, r27
     cb4:	26 17       	cp	r18, r22
     cb6:	37 07       	cpc	r19, r23
     cb8:	48 07       	cpc	r20, r24
     cba:	ab 07       	cpc	r26, r27
     cbc:	b0 e8       	ldi	r27, 0x80	; 128
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__divsf3_pse+0x56>
     cc0:	bb 0b       	sbc	r27, r27
     cc2:	80 2d       	mov	r24, r0
     cc4:	bf 01       	movw	r22, r30
     cc6:	ff 27       	eor	r31, r31
     cc8:	93 58       	subi	r25, 0x83	; 131
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	2a f0       	brmi	.+10     	; 0xcd8 <__divsf3_pse+0x6c>
     cce:	9e 3f       	cpi	r25, 0xFE	; 254
     cd0:	51 05       	cpc	r21, r1
     cd2:	68 f0       	brcs	.+26     	; 0xcee <__divsf3_pse+0x82>
     cd4:	b6 c0       	rjmp	.+364    	; 0xe42 <__fp_inf>
     cd6:	00 c1       	rjmp	.+512    	; 0xed8 <__fp_szero>
     cd8:	5f 3f       	cpi	r21, 0xFF	; 255
     cda:	ec f3       	brlt	.-6      	; 0xcd6 <__divsf3_pse+0x6a>
     cdc:	98 3e       	cpi	r25, 0xE8	; 232
     cde:	dc f3       	brlt	.-10     	; 0xcd6 <__divsf3_pse+0x6a>
     ce0:	86 95       	lsr	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	b7 95       	ror	r27
     ce8:	f7 95       	ror	r31
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	c9 f7       	brne	.-14     	; 0xce0 <__divsf3_pse+0x74>
     cee:	88 0f       	add	r24, r24
     cf0:	91 1d       	adc	r25, r1
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	97 f9       	bld	r25, 7
     cf8:	08 95       	ret
     cfa:	e1 e0       	ldi	r30, 0x01	; 1
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	bb 1f       	adc	r27, r27
     d04:	62 17       	cp	r22, r18
     d06:	73 07       	cpc	r23, r19
     d08:	84 07       	cpc	r24, r20
     d0a:	ba 07       	cpc	r27, r26
     d0c:	20 f0       	brcs	.+8      	; 0xd16 <__divsf3_pse+0xaa>
     d0e:	62 1b       	sub	r22, r18
     d10:	73 0b       	sbc	r23, r19
     d12:	84 0b       	sbc	r24, r20
     d14:	ba 0b       	sbc	r27, r26
     d16:	ee 1f       	adc	r30, r30
     d18:	88 f7       	brcc	.-30     	; 0xcfc <__divsf3_pse+0x90>
     d1a:	e0 95       	com	r30
     d1c:	08 95       	ret

00000d1e <__fixsfsi>:
     d1e:	04 d0       	rcall	.+8      	; 0xd28 <__fixunssfsi>
     d20:	68 94       	set
     d22:	b1 11       	cpse	r27, r1
     d24:	d9 c0       	rjmp	.+434    	; 0xed8 <__fp_szero>
     d26:	08 95       	ret

00000d28 <__fixunssfsi>:
     d28:	bc d0       	rcall	.+376    	; 0xea2 <__fp_splitA>
     d2a:	88 f0       	brcs	.+34     	; 0xd4e <__fixunssfsi+0x26>
     d2c:	9f 57       	subi	r25, 0x7F	; 127
     d2e:	90 f0       	brcs	.+36     	; 0xd54 <__fixunssfsi+0x2c>
     d30:	b9 2f       	mov	r27, r25
     d32:	99 27       	eor	r25, r25
     d34:	b7 51       	subi	r27, 0x17	; 23
     d36:	a0 f0       	brcs	.+40     	; 0xd60 <__fixunssfsi+0x38>
     d38:	d1 f0       	breq	.+52     	; 0xd6e <__fixunssfsi+0x46>
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	1a f0       	brmi	.+6      	; 0xd4a <__fixunssfsi+0x22>
     d44:	ba 95       	dec	r27
     d46:	c9 f7       	brne	.-14     	; 0xd3a <__fixunssfsi+0x12>
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__fixunssfsi+0x46>
     d4a:	b1 30       	cpi	r27, 0x01	; 1
     d4c:	81 f0       	breq	.+32     	; 0xd6e <__fixunssfsi+0x46>
     d4e:	c3 d0       	rcall	.+390    	; 0xed6 <__fp_zero>
     d50:	b1 e0       	ldi	r27, 0x01	; 1
     d52:	08 95       	ret
     d54:	c0 c0       	rjmp	.+384    	; 0xed6 <__fp_zero>
     d56:	67 2f       	mov	r22, r23
     d58:	78 2f       	mov	r23, r24
     d5a:	88 27       	eor	r24, r24
     d5c:	b8 5f       	subi	r27, 0xF8	; 248
     d5e:	39 f0       	breq	.+14     	; 0xd6e <__fixunssfsi+0x46>
     d60:	b9 3f       	cpi	r27, 0xF9	; 249
     d62:	cc f3       	brlt	.-14     	; 0xd56 <__fixunssfsi+0x2e>
     d64:	86 95       	lsr	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b3 95       	inc	r27
     d6c:	d9 f7       	brne	.-10     	; 0xd64 <__fixunssfsi+0x3c>
     d6e:	3e f4       	brtc	.+14     	; 0xd7e <__fixunssfsi+0x56>
     d70:	90 95       	com	r25
     d72:	80 95       	com	r24
     d74:	70 95       	com	r23
     d76:	61 95       	neg	r22
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	8f 4f       	sbci	r24, 0xFF	; 255
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	08 95       	ret

00000d80 <__floatunsisf>:
     d80:	e8 94       	clt
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <__floatsisf+0x12>

00000d84 <__floatsisf>:
     d84:	97 fb       	bst	r25, 7
     d86:	3e f4       	brtc	.+14     	; 0xd96 <__floatsisf+0x12>
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	61 95       	neg	r22
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	99 23       	and	r25, r25
     d98:	a9 f0       	breq	.+42     	; 0xdc4 <__floatsisf+0x40>
     d9a:	f9 2f       	mov	r31, r25
     d9c:	96 e9       	ldi	r25, 0x96	; 150
     d9e:	bb 27       	eor	r27, r27
     da0:	93 95       	inc	r25
     da2:	f6 95       	lsr	r31
     da4:	87 95       	ror	r24
     da6:	77 95       	ror	r23
     da8:	67 95       	ror	r22
     daa:	b7 95       	ror	r27
     dac:	f1 11       	cpse	r31, r1
     dae:	f8 cf       	rjmp	.-16     	; 0xda0 <__floatsisf+0x1c>
     db0:	fa f4       	brpl	.+62     	; 0xdf0 <__floatsisf+0x6c>
     db2:	bb 0f       	add	r27, r27
     db4:	11 f4       	brne	.+4      	; 0xdba <__floatsisf+0x36>
     db6:	60 ff       	sbrs	r22, 0
     db8:	1b c0       	rjmp	.+54     	; 0xdf0 <__floatsisf+0x6c>
     dba:	6f 5f       	subi	r22, 0xFF	; 255
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	8f 4f       	sbci	r24, 0xFF	; 255
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	16 c0       	rjmp	.+44     	; 0xdf0 <__floatsisf+0x6c>
     dc4:	88 23       	and	r24, r24
     dc6:	11 f0       	breq	.+4      	; 0xdcc <__floatsisf+0x48>
     dc8:	96 e9       	ldi	r25, 0x96	; 150
     dca:	11 c0       	rjmp	.+34     	; 0xdee <__floatsisf+0x6a>
     dcc:	77 23       	and	r23, r23
     dce:	21 f0       	breq	.+8      	; 0xdd8 <__floatsisf+0x54>
     dd0:	9e e8       	ldi	r25, 0x8E	; 142
     dd2:	87 2f       	mov	r24, r23
     dd4:	76 2f       	mov	r23, r22
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__floatsisf+0x5e>
     dd8:	66 23       	and	r22, r22
     dda:	71 f0       	breq	.+28     	; 0xdf8 <__floatsisf+0x74>
     ddc:	96 e8       	ldi	r25, 0x86	; 134
     dde:	86 2f       	mov	r24, r22
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	2a f0       	brmi	.+10     	; 0xdf0 <__floatsisf+0x6c>
     de6:	9a 95       	dec	r25
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	88 1f       	adc	r24, r24
     dee:	da f7       	brpl	.-10     	; 0xde6 <__floatsisf+0x62>
     df0:	88 0f       	add	r24, r24
     df2:	96 95       	lsr	r25
     df4:	87 95       	ror	r24
     df6:	97 f9       	bld	r25, 7
     df8:	08 95       	ret

00000dfa <__fp_cmp>:
     dfa:	99 0f       	add	r25, r25
     dfc:	00 08       	sbc	r0, r0
     dfe:	55 0f       	add	r21, r21
     e00:	aa 0b       	sbc	r26, r26
     e02:	e0 e8       	ldi	r30, 0x80	; 128
     e04:	fe ef       	ldi	r31, 0xFE	; 254
     e06:	16 16       	cp	r1, r22
     e08:	17 06       	cpc	r1, r23
     e0a:	e8 07       	cpc	r30, r24
     e0c:	f9 07       	cpc	r31, r25
     e0e:	c0 f0       	brcs	.+48     	; 0xe40 <__fp_cmp+0x46>
     e10:	12 16       	cp	r1, r18
     e12:	13 06       	cpc	r1, r19
     e14:	e4 07       	cpc	r30, r20
     e16:	f5 07       	cpc	r31, r21
     e18:	98 f0       	brcs	.+38     	; 0xe40 <__fp_cmp+0x46>
     e1a:	62 1b       	sub	r22, r18
     e1c:	73 0b       	sbc	r23, r19
     e1e:	84 0b       	sbc	r24, r20
     e20:	95 0b       	sbc	r25, r21
     e22:	39 f4       	brne	.+14     	; 0xe32 <__fp_cmp+0x38>
     e24:	0a 26       	eor	r0, r26
     e26:	61 f0       	breq	.+24     	; 0xe40 <__fp_cmp+0x46>
     e28:	23 2b       	or	r18, r19
     e2a:	24 2b       	or	r18, r20
     e2c:	25 2b       	or	r18, r21
     e2e:	21 f4       	brne	.+8      	; 0xe38 <__fp_cmp+0x3e>
     e30:	08 95       	ret
     e32:	0a 26       	eor	r0, r26
     e34:	09 f4       	brne	.+2      	; 0xe38 <__fp_cmp+0x3e>
     e36:	a1 40       	sbci	r26, 0x01	; 1
     e38:	a6 95       	lsr	r26
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	81 1d       	adc	r24, r1
     e3e:	81 1d       	adc	r24, r1
     e40:	08 95       	ret

00000e42 <__fp_inf>:
     e42:	97 f9       	bld	r25, 7
     e44:	9f 67       	ori	r25, 0x7F	; 127
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	08 95       	ret

00000e4e <__fp_nan>:
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	80 ec       	ldi	r24, 0xC0	; 192
     e52:	08 95       	ret

00000e54 <__fp_pscA>:
     e54:	00 24       	eor	r0, r0
     e56:	0a 94       	dec	r0
     e58:	16 16       	cp	r1, r22
     e5a:	17 06       	cpc	r1, r23
     e5c:	18 06       	cpc	r1, r24
     e5e:	09 06       	cpc	r0, r25
     e60:	08 95       	ret

00000e62 <__fp_pscB>:
     e62:	00 24       	eor	r0, r0
     e64:	0a 94       	dec	r0
     e66:	12 16       	cp	r1, r18
     e68:	13 06       	cpc	r1, r19
     e6a:	14 06       	cpc	r1, r20
     e6c:	05 06       	cpc	r0, r21
     e6e:	08 95       	ret

00000e70 <__fp_round>:
     e70:	09 2e       	mov	r0, r25
     e72:	03 94       	inc	r0
     e74:	00 0c       	add	r0, r0
     e76:	11 f4       	brne	.+4      	; 0xe7c <__fp_round+0xc>
     e78:	88 23       	and	r24, r24
     e7a:	52 f0       	brmi	.+20     	; 0xe90 <__fp_round+0x20>
     e7c:	bb 0f       	add	r27, r27
     e7e:	40 f4       	brcc	.+16     	; 0xe90 <__fp_round+0x20>
     e80:	bf 2b       	or	r27, r31
     e82:	11 f4       	brne	.+4      	; 0xe88 <__fp_round+0x18>
     e84:	60 ff       	sbrs	r22, 0
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__fp_round+0x20>
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	08 95       	ret

00000e92 <__fp_split3>:
     e92:	57 fd       	sbrc	r21, 7
     e94:	90 58       	subi	r25, 0x80	; 128
     e96:	44 0f       	add	r20, r20
     e98:	55 1f       	adc	r21, r21
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <__fp_splitA+0x10>
     e9c:	5f 3f       	cpi	r21, 0xFF	; 255
     e9e:	71 f0       	breq	.+28     	; 0xebc <__fp_splitA+0x1a>
     ea0:	47 95       	ror	r20

00000ea2 <__fp_splitA>:
     ea2:	88 0f       	add	r24, r24
     ea4:	97 fb       	bst	r25, 7
     ea6:	99 1f       	adc	r25, r25
     ea8:	61 f0       	breq	.+24     	; 0xec2 <__fp_splitA+0x20>
     eaa:	9f 3f       	cpi	r25, 0xFF	; 255
     eac:	79 f0       	breq	.+30     	; 0xecc <__fp_splitA+0x2a>
     eae:	87 95       	ror	r24
     eb0:	08 95       	ret
     eb2:	12 16       	cp	r1, r18
     eb4:	13 06       	cpc	r1, r19
     eb6:	14 06       	cpc	r1, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	f2 cf       	rjmp	.-28     	; 0xea0 <__fp_split3+0xe>
     ebc:	46 95       	lsr	r20
     ebe:	f1 df       	rcall	.-30     	; 0xea2 <__fp_splitA>
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <__fp_splitA+0x30>
     ec2:	16 16       	cp	r1, r22
     ec4:	17 06       	cpc	r1, r23
     ec6:	18 06       	cpc	r1, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	f1 cf       	rjmp	.-30     	; 0xeae <__fp_splitA+0xc>
     ecc:	86 95       	lsr	r24
     ece:	71 05       	cpc	r23, r1
     ed0:	61 05       	cpc	r22, r1
     ed2:	08 94       	sec
     ed4:	08 95       	ret

00000ed6 <__fp_zero>:
     ed6:	e8 94       	clt

00000ed8 <__fp_szero>:
     ed8:	bb 27       	eor	r27, r27
     eda:	66 27       	eor	r22, r22
     edc:	77 27       	eor	r23, r23
     ede:	cb 01       	movw	r24, r22
     ee0:	97 f9       	bld	r25, 7
     ee2:	08 95       	ret

00000ee4 <__gesf2>:
     ee4:	8a df       	rcall	.-236    	; 0xdfa <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__gesf2+0x6>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	08 95       	ret

00000eec <__mulsf3>:
     eec:	0b d0       	rcall	.+22     	; 0xf04 <__mulsf3x>
     eee:	c0 cf       	rjmp	.-128    	; 0xe70 <__fp_round>
     ef0:	b1 df       	rcall	.-158    	; 0xe54 <__fp_pscA>
     ef2:	28 f0       	brcs	.+10     	; 0xefe <__mulsf3+0x12>
     ef4:	b6 df       	rcall	.-148    	; 0xe62 <__fp_pscB>
     ef6:	18 f0       	brcs	.+6      	; 0xefe <__mulsf3+0x12>
     ef8:	95 23       	and	r25, r21
     efa:	09 f0       	breq	.+2      	; 0xefe <__mulsf3+0x12>
     efc:	a2 cf       	rjmp	.-188    	; 0xe42 <__fp_inf>
     efe:	a7 cf       	rjmp	.-178    	; 0xe4e <__fp_nan>
     f00:	11 24       	eor	r1, r1
     f02:	ea cf       	rjmp	.-44     	; 0xed8 <__fp_szero>

00000f04 <__mulsf3x>:
     f04:	c6 df       	rcall	.-116    	; 0xe92 <__fp_split3>
     f06:	a0 f3       	brcs	.-24     	; 0xef0 <__mulsf3+0x4>

00000f08 <__mulsf3_pse>:
     f08:	95 9f       	mul	r25, r21
     f0a:	d1 f3       	breq	.-12     	; 0xf00 <__mulsf3+0x14>
     f0c:	95 0f       	add	r25, r21
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	55 1f       	adc	r21, r21
     f12:	62 9f       	mul	r22, r18
     f14:	f0 01       	movw	r30, r0
     f16:	72 9f       	mul	r23, r18
     f18:	bb 27       	eor	r27, r27
     f1a:	f0 0d       	add	r31, r0
     f1c:	b1 1d       	adc	r27, r1
     f1e:	63 9f       	mul	r22, r19
     f20:	aa 27       	eor	r26, r26
     f22:	f0 0d       	add	r31, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	aa 1f       	adc	r26, r26
     f28:	64 9f       	mul	r22, r20
     f2a:	66 27       	eor	r22, r22
     f2c:	b0 0d       	add	r27, r0
     f2e:	a1 1d       	adc	r26, r1
     f30:	66 1f       	adc	r22, r22
     f32:	82 9f       	mul	r24, r18
     f34:	22 27       	eor	r18, r18
     f36:	b0 0d       	add	r27, r0
     f38:	a1 1d       	adc	r26, r1
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 9f       	mul	r23, r19
     f3e:	b0 0d       	add	r27, r0
     f40:	a1 1d       	adc	r26, r1
     f42:	62 1f       	adc	r22, r18
     f44:	83 9f       	mul	r24, r19
     f46:	a0 0d       	add	r26, r0
     f48:	61 1d       	adc	r22, r1
     f4a:	22 1f       	adc	r18, r18
     f4c:	74 9f       	mul	r23, r20
     f4e:	33 27       	eor	r19, r19
     f50:	a0 0d       	add	r26, r0
     f52:	61 1d       	adc	r22, r1
     f54:	23 1f       	adc	r18, r19
     f56:	84 9f       	mul	r24, r20
     f58:	60 0d       	add	r22, r0
     f5a:	21 1d       	adc	r18, r1
     f5c:	82 2f       	mov	r24, r18
     f5e:	76 2f       	mov	r23, r22
     f60:	6a 2f       	mov	r22, r26
     f62:	11 24       	eor	r1, r1
     f64:	9f 57       	subi	r25, 0x7F	; 127
     f66:	50 40       	sbci	r21, 0x00	; 0
     f68:	8a f0       	brmi	.+34     	; 0xf8c <__mulsf3_pse+0x84>
     f6a:	e1 f0       	breq	.+56     	; 0xfa4 <__mulsf3_pse+0x9c>
     f6c:	88 23       	and	r24, r24
     f6e:	4a f0       	brmi	.+18     	; 0xf82 <__mulsf3_pse+0x7a>
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	bb 1f       	adc	r27, r27
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	91 50       	subi	r25, 0x01	; 1
     f7e:	50 40       	sbci	r21, 0x00	; 0
     f80:	a9 f7       	brne	.-22     	; 0xf6c <__mulsf3_pse+0x64>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	70 f0       	brcs	.+28     	; 0xfa4 <__mulsf3_pse+0x9c>
     f88:	5c cf       	rjmp	.-328    	; 0xe42 <__fp_inf>
     f8a:	a6 cf       	rjmp	.-180    	; 0xed8 <__fp_szero>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	ec f3       	brlt	.-6      	; 0xf8a <__mulsf3_pse+0x82>
     f90:	98 3e       	cpi	r25, 0xE8	; 232
     f92:	dc f3       	brlt	.-10     	; 0xf8a <__mulsf3_pse+0x82>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	e7 95       	ror	r30
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	c1 f7       	brne	.-16     	; 0xf94 <__mulsf3_pse+0x8c>
     fa4:	fe 2b       	or	r31, r30
     fa6:	88 0f       	add	r24, r24
     fa8:	91 1d       	adc	r25, r1
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <__divmodsi4>:
     fb2:	97 fb       	bst	r25, 7
     fb4:	09 2e       	mov	r0, r25
     fb6:	05 26       	eor	r0, r21
     fb8:	0e d0       	rcall	.+28     	; 0xfd6 <__divmodsi4_neg1>
     fba:	57 fd       	sbrc	r21, 7
     fbc:	04 d0       	rcall	.+8      	; 0xfc6 <__divmodsi4_neg2>
     fbe:	14 d0       	rcall	.+40     	; 0xfe8 <__udivmodsi4>
     fc0:	0a d0       	rcall	.+20     	; 0xfd6 <__divmodsi4_neg1>
     fc2:	00 1c       	adc	r0, r0
     fc4:	38 f4       	brcc	.+14     	; 0xfd4 <__divmodsi4_exit>

00000fc6 <__divmodsi4_neg2>:
     fc6:	50 95       	com	r21
     fc8:	40 95       	com	r20
     fca:	30 95       	com	r19
     fcc:	21 95       	neg	r18
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	4f 4f       	sbci	r20, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255

00000fd4 <__divmodsi4_exit>:
     fd4:	08 95       	ret

00000fd6 <__divmodsi4_neg1>:
     fd6:	f6 f7       	brtc	.-4      	; 0xfd4 <__divmodsi4_exit>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__udivmodsi4>:
     fe8:	a1 e2       	ldi	r26, 0x21	; 33
     fea:	1a 2e       	mov	r1, r26
     fec:	aa 1b       	sub	r26, r26
     fee:	bb 1b       	sub	r27, r27
     ff0:	fd 01       	movw	r30, r26
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <__udivmodsi4_ep>

00000ff4 <__udivmodsi4_loop>:
     ff4:	aa 1f       	adc	r26, r26
     ff6:	bb 1f       	adc	r27, r27
     ff8:	ee 1f       	adc	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	a2 17       	cp	r26, r18
     ffe:	b3 07       	cpc	r27, r19
    1000:	e4 07       	cpc	r30, r20
    1002:	f5 07       	cpc	r31, r21
    1004:	20 f0       	brcs	.+8      	; 0x100e <__udivmodsi4_ep>
    1006:	a2 1b       	sub	r26, r18
    1008:	b3 0b       	sbc	r27, r19
    100a:	e4 0b       	sbc	r30, r20
    100c:	f5 0b       	sbc	r31, r21

0000100e <__udivmodsi4_ep>:
    100e:	66 1f       	adc	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	1a 94       	dec	r1
    1018:	69 f7       	brne	.-38     	; 0xff4 <__udivmodsi4_loop>
    101a:	60 95       	com	r22
    101c:	70 95       	com	r23
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	bd 01       	movw	r22, r26
    1028:	cf 01       	movw	r24, r30
    102a:	08 95       	ret

0000102c <_exit>:
    102c:	f8 94       	cli

0000102e <__stop_program>:
    102e:	ff cf       	rjmp	.-2      	; 0x102e <__stop_program>
